// server.ts
import type { ServerWebSocket } from "bun";
import TelegramBot from 'node-telegram-bot-api';

type ClientData = {
  id: string;
};

// –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
if (!process.env.NODE_ENV || process.env.NODE_ENV === 'dev') {
  try {
    const dotenv = Bun.file(".env");
    if (await dotenv.exists()) {
      const text = await dotenv.text();
      for (const line of text.split("\n")) {
        const [key, ...value] = line.trim().split("=");
        if (key && !key.startsWith("#") && value !== undefined) {
          const val = value.join("=");
          process.env[key] = val;
          Bun.env[key] = val;
        }
      }
    }
  } catch (e) {
    console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env —Ñ–∞–π–ª–∞:", e);
  }
}

const isDev = process.env.NODE_ENV === "dev";
const port = Number(process.env.PORT) || 3010;

const clients = new Map<string, ServerWebSocket<ClientData>>();
const telegramToWebRtcIdMap = new Map<number, string>();

// --- TELEGRAM BOT WEBHOOKS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ---
const TELEGRAM_BOT_TOKEN = Bun.env.TELEGRAM_BOT_TOKEN;
const WEBRTC_SERVER_BASE_URL = Bun.env.WEBRTC_SERVER_URL || 'https://webrtc-bun.shk.solutions';
const TELEGRAM_WEBHOOK_PATH = '/telegram-webhook';
const TELEGRAM_WEBHOOK_URL = `${WEBRTC_SERVER_BASE_URL}${TELEGRAM_WEBHOOK_PATH}`;

let bot: TelegramBot;

if (!TELEGRAM_BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Webhook Telegram –±–æ—Ç–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
} else {
  bot = new TelegramBot(TELEGRAM_BOT_TOKEN);

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ setWebHook
  bot.setWebHook(TELEGRAM_WEBHOOK_URL, {
    drop_pending_updates: true
  } as any)
    .then(() => {
      console.log(`üéâ Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${TELEGRAM_WEBHOOK_URL}`);
      return bot.getMe();
    })
    .then((me) => {
      console.log(`Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${me.username}`);
    })
    .catch((e: Error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram webhook: ${e.message}`);
    });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId,
      '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤. üìû\n\n' +
      '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:\n' +
      `1. –û—Ç–∫—Ä–æ–π —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ: ${WEBRTC_SERVER_BASE_URL}\n` +
      '2. –†–∞–∑—Ä–µ—à–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.\n' +
      '3. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram ID" –∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π Telegram User ID (–µ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ /mytelegramid).\n' +
      '4. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /getlink, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∞.'
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getlink
  bot.onText(/\/getlink/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramUserId = msg.from?.id;

    if (!telegramUserId) {
      bot.sendMessage(chatId, '–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram User ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return;
    }

    try {
      const response = await fetch(`${WEBRTC_SERVER_BASE_URL}/get-webrtc-id?telegramUserId=${telegramUserId}`);

      if (response.ok) {
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è data
        const data = await response.json() as { webrtcId?: string; error?: string };
        if (data.webrtcId) {
          const inviteLink = `${WEBRTC_SERVER_BASE_URL}/?join=${data.webrtcId}`;
          bot.sendMessage(chatId,
            `üöÄ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:\n\`${inviteLink}\`\n\n` +
            `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –¥—Ä—É–≥—É. –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π ID, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${WEBRTC_SERVER_BASE_URL} –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram ID" (–≤–∞—à Telegram User ID: \`${telegramUserId}\`).`,
            { parse_mode: 'Markdown' }
          );
        } else {
          bot.sendMessage(chatId,
            `ü§î –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π WebRTC ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${WEBRTC_SERVER_BASE_URL}, —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∏ –Ω–∞–∂–∞–ª–∏ "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram ID", –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à Telegram User ID: \`${telegramUserId}\`.`,
            { parse_mode: 'Markdown' }
          );
        }
      } else {
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è errorData
        const errorData = await response.json() as { error?: string };
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ WebRTC ID –æ—Ç Bun-—Å–µ—Ä–≤–µ—Ä–∞ (–≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞):', response.status, errorData);
        bot.sendMessage(chatId,
          `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ ID. ${errorData.error || ''}\n` +
          `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${WEBRTC_SERVER_BASE_URL} –∏ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π Telegram ID: \`${telegramUserId}\`.`,
          { parse_mode: 'Markdown' }
        );
      }
    } catch (error: unknown) {
      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ WebRTC ID (–≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞):', errorMessage);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ WebRTC —Å–µ—Ä–≤–∏—Å—É. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ /mytelegramid
  bot.onText(/\/mytelegramid/, (msg) => {
    const chatId = msg.chat.id;
    const telegramUserId = msg.from?.id;
    if (telegramUserId) {
      bot.sendMessage(chatId, `–í–∞—à Telegram User ID: \`${telegramUserId}\`\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞.`, { parse_mode: 'Markdown' });
    } else {
      bot.sendMessage(chatId, '–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram User ID.');
    }
  });

  bot.on('error', (error: Error) => {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞ (–ø—Ä–∏ –≤–µ–±—Ö—É–∫–∞—Ö):', error);
  });
}

Bun.serve<ClientData>({
  hostname: "0.0.0.0",
  port: port,
  websocket: {
    open(ws) {
      const id = Math.random().toString(36).slice(2, 10);
      clients.set(id, ws);
      ws.data.id = id;
      console.log(`[WS] –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ${id}. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`);
      ws.send(JSON.stringify({ yourId: id }));
    },
    message(ws, message) {
      try {
        const data = JSON.parse(message.toString());

        if (data.type === "registerTelegramId" && typeof data.telegramUserId === 'number') {
          const existingWebRtcId = telegramToWebRtcIdMap.get(data.telegramUserId);
          if (existingWebRtcId && existingWebRtcId !== ws.data.id) {
            console.warn(`[WS] Telegram User ID ${data.telegramUserId} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ ${existingWebRtcId}. –ü–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ ${ws.data.id}.`);
          }
          telegramToWebRtcIdMap.set(data.telegramUserId, ws.data.id);
          ws.send(JSON.stringify({ type: "telegramIdRegistered", success: true }));
          console.log(`[WS] –ü—Ä–∏–≤—è–∑–∞–Ω WebRTC ID ${ws.data.id} –∫ Telegram User ID ${data.telegramUserId}.`);
          return;
        }

        const target = clients.get(data.to);
        if (target && target.readyState === 1) {
          target.send(JSON.stringify({ from: ws.data.id, ...data }));
        } else {
          console.warn(`[WS] –¶–µ–ª–µ–≤–æ–π –∫–ª–∏–µ–Ω—Ç ${data.to} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤.`);
          ws.send(JSON.stringify({ type: "error", message: `Peer ${data.to} not found or not ready.` }));
        }
      } catch (e) {
        console.error(`[WS] –û—à–∏–±–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç ${ws.data.id}:`, e, `–°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`);
      }
    },
    close(ws) {
      clients.delete(ws.data.id);
      console.log(`[WS] –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω: ${ws.data.id}. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}`);
      for (const [tgUserId, webrtcId] of telegramToWebRtcIdMap.entries()) {
        if (webrtcId === ws.data.id) {
          telegramToWebRtcIdMap.delete(tgUserId);
          console.log(`[WS] –£–¥–∞–ª–µ–Ω Telegram ID ${tgUserId} –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ WebRTC ID ${ws.data.id}.`);
          break;
        }
      }
    },
  },
  fetch: async (req, server) => {
    const url = new URL(req.url);

    if (url.pathname === "/favicon.ico") {
      return new Response(null, { status: 204 });
    }

    if (url.pathname === "/") {
      return new Response(Bun.file("./public/index.html"));
    }

    if (url.pathname === "/ws") {
      const upgraded = server.upgrade(req, {
        data: { id: "" },
      });
      if (upgraded) {
        console.log(`[HTTP] –ó–∞–ø—Ä–æ—Å –Ω–∞ /ws —É—Å–ø–µ—à–Ω–æ upgraded.`);
        return new Response();
      }
      console.warn(`[HTTP] –ù–µ —É–¥–∞–ª–æ—Å—å upgrade /ws –∑–∞–ø—Ä–æ—Å.`);
      return new Response("WebSocket upgrade failed", { status: 500 });
    }

    if (url.pathname.startsWith("/public/")) {
      const filePath = "." + url.pathname;
      try {
        const file = Bun.file(filePath);
        return new Response(file);
      } catch (error) {
        console.warn(`[HTTP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–¥–∞—á–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        return new Response("File not found", { status: 404 });
      }
    }

    // –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø TELEGRAM WEBHOOK
    if (req.method === "POST" && url.pathname === TELEGRAM_WEBHOOK_PATH) {
      if (!bot) {
        console.warn('–ü–æ–ª—É—á–µ–Ω Telegram webhook, –Ω–æ –±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        return new Response('Bot not initialized', { status: 500 });
      }
      try {
        const update = await req.json();
        bot.processUpdate(update as any);
        return new Response("OK", { status: 200 });
      } catch (e: unknown) {
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 5: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        const errorMessage = e instanceof Error ? e.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook:", errorMessage);
        return new Response("Error processing update", { status: 500 });
      }
    }

    // –≠–ù–î–ü–û–ò–ù–¢ –¥–ª—è Telegram –±–æ—Ç–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ WebRTC ID)
    if (url.pathname === "/get-webrtc-id") {
      const telegramUserIdParam = url.searchParams.get("telegramUserId");
      if (telegramUserIdParam) {
        const telegramUserId = Number(telegramUserIdParam);
        if (isNaN(telegramUserId)) {
          return new Response(JSON.stringify({ error: "Invalid telegramUserId parameter." }), {
            status: 400,
            headers: { "Content-Type": "application/json" },
          });
        }

        const webrtcId = telegramToWebRtcIdMap.get(telegramUserId);
        if (webrtcId) {
          if (clients.has(webrtcId)) {
            console.log(`[HTTP] Telegram ID ${telegramUserId} -> WebRTC ID ${webrtcId} (–∞–∫—Ç–∏–≤–µ–Ω).`);
            return new Response(JSON.stringify({ webrtcId: webrtcId }), {
              headers: { "Content-Type": "application/json" },
            });
          } else {
            telegramToWebRtcIdMap.delete(telegramUserId);
            console.warn(`[HTTP] –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π WebRTC ID ${webrtcId} –¥–ª—è Telegram ID ${telegramUserId}. –£–¥–∞–ª–µ–Ω–æ –∏–∑ –º–∞–ø–ø–∏–Ω–≥–∞.`);
            return new Response(JSON.stringify({ error: "WebRTC ID is no longer active. Please refresh your browser and re-register." }), {
              status: 404,
              headers: { "Content-Type": "application/json" },
            });
          }
        } else {
          console.log(`[HTTP] WebRTC ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è Telegram ID ${telegramUserId}.`);
          return new Response(JSON.stringify({ error: "WebRTC ID not found for this Telegram user. Please register first." }), {
            status: 404,
            headers: { "Content-Type": "application/json" },
          });
        }
      } else {
        console.warn(`[HTTP] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä telegramUserId.`);
        return new Response(JSON.stringify({ error: "Missing telegramUserId parameter." }), {
          status: 400,
          headers: { "Content-Type": "application/json" },
        });
      }
    }

    console.log(`[HTTP] 404: ${url.pathname}`);
    return new Response("404 Not Found", { status: 404 });
  },
});

console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:${port}`);
console.log(`–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${isDev ? '–¥–∞' : '–Ω–µ—Ç'}`);